#!/usr/bin/env perl

=head1 NAME

jroll - Binary projects deploy (jails & ZFS based)

SYNOPSIS

jroll [ options ] project

=cut

use strict;
use warnings;
use utf8;

use File::Temp qw(tempfile);
use FindBin;
use Getopt::Long qw( :config no_auto_abbrev bundling require_order );
use LWP::UserAgent;
use POSIX qw( strftime );
use YAML::XS qw( Load );

# command line options & config loaded
my ( %opts,$conf );

# kind of logging
sub now   { strftime '%Y-%m-%d %H:%M:%S',localtime }
sub debug { warn &now . " [debug] @_\n" if $opts{ verbose } }
sub info  { warn &now . "  [info] @_\n" }
sub fatal { die  &now . " [error] @_\n" }

# get inactive group for project
sub inactive($);

# get full jail info
sub jinfo(@);

# remote command execution
sub rcmd($$);

# remote file uploading
sub rput($$$);

# actions
sub deploy();
sub help();

my %cmds = (
	help    => \&help,
	deploy  => \&deploy,
	restart => \&restart,
	show    => \&show,
);

# just a main ;)
sub main {
	# parse common command line switches
	GetOptions(\%opts, qw(
		config|c=s
		verbose|v
	)) or goto &Help::main;

	# reasonable defaults
	$opts{ config } //= $FindBin::Bin . '/../etc/jroll.yml';

	# config loading
	{
		open my $fd, '<', $opts{ config } or
			fatal "can't found config file: $opts{ config }";
		my $yml = do { local $/ = <$fd> } or
			fatal "can't load config file: $opts{ config }";
		$conf = Load $yml or
			fatal "can't parse config file: $opts{ config }";
		debug "config loaded: $opts{ config }";
	}

	# action argument required
	my $do = shift @ARGV or
		goto &Help::main;

	# try to dispatch
	my @do = grep { /^$do/ } keys %cmds;
	goto &Help::main
		unless @do==1;
	goto &{ shift @do };
}

sub help() {
	if ( my $do = shift @ARGV ) {
		my @do = grep { /^$do/ } keys %cmds;
		goto &{ 'Help::' . $do[0] }
			if @do == 1;
	}
	goto &Help::main;
}

sub deploy() {
	my $start = time;

	my %copts;
	GetOptions(\%copts, qw(
		dry-run|n
		group|g=s
		sweep|w
	)) or goto &Help::main;

	# required arguments (projects)
	goto &Help::deploy unless @ARGV;

	for my $pname ( @ARGV ) {
		info "dry-run process (read only)"
			if $copts{'dry-run'};

		# get project info
		my $proj = $conf->{ projects }{ $pname } or
			fatal "no project found: $pname";

		my $inact = $copts{ group } // inactive $proj;

		my $mmbs = $proj->{ groups }{ $inact } or
			fatal "no group '$inact' defined for project";

		info "work on project '$pname', group '$inact'";

		# super info
		info "discovering super info";
		my $super = jinfo split '@',$proj->{ super };

		# datacenters info
		my %dcs;

		# keep super as first pillar
		$dcs{ $proj->{ dc } // '' } = { pillar => $proj->{ super }, consumers => 0 };

		# destinations info
		my %trts;
		for ( @$mmbs ) {
			info "discovering targets info ($_->{ id })";
			$trts{ $_->{ id } } = jinfo split '@',$_->{ id };

			my $dc = $_->{ dc } // '';
			if ( exists $dcs{ $dc } ) {
				$trts{ $_->{ id } }{ pillar } = $dcs{ $dc }{ pillar };
				$dcs{ $dc }{ consumers }++;
			} else {
				$trts{ $_->{ id } }{ pillar } = $proj->{ super };
				$dcs{ $proj->{ dc } // '' }{ consumers }++;
				$dcs{ $dc }{ pillar } = $_->{ id };
				$dcs{ $dc }{ consumers } = 0;
			}
		}

		info "searching for latest common snapshot";
		my $base;
		for my $cnd ( @{ $super->{ snapshots } } ) {
			my $fnd = 0;
			for ( @$mmbs ) {
				$fnd++ if $trts{ $_->{ id } }->{ mss }{ $cnd };
			}
			next unless $fnd == @$mmbs;

			$base = $cnd;
			info "selected base snapshot: $base";
			last;
		}
		fatal "no one common snapshot found"
			unless $base;

		info "analyzing snapshots to sweep out";
		for ( @$mmbs ) {
			$trts{ $_->{ id } }{ sweep } = [];

			my $keep = $_->{ keep } // $proj->{ keep } // 23;
			if ( $keep ) {
				debug "keeping $keep last snapshots for $_->{ id }";
			} else {
				debug "sweep disabled for $_->{ id }";
			}

			local @_ = grep { /^jroll\.\d{4}-\d{2}-\d{2}\.\d{2}:\d{2}:\d{2}$/ }
			           @{ $trts{ $_->{ id } }{ snapshots } };
			# exclude base for extra safety
			my @swp = grep { $_ ne $base } @_[ $keep .. $#_ ];

			if ( $keep && $copts{ sweep } ) {
				debug scalar( @swp ) . " snapshots will be removed at $_->{ id } because of used 'sweep' option";
				$trts{ $_->{ id } }{ sweep } = \@swp;
			} elsif ( $keep && $#swp > 2 * $keep ) {
				debug scalar( @swp ) . " snapshots will be removed at $_->{ id } because of double excess 'keep' setting";
				$trts{ $_->{ id } }{ sweep } = \@swp;
			} else {
				debug scalar( @swp ) . " snapshots will be kept at $_->{ id }";
			}
		}

		my @clean = @{ $_->{ clean } // $proj->{ clean } // [qw( /tmp /var/log )] };
		if ( @clean ) {
			debug "stopping $super->{ jail }";
			rcmd $proj->{ super } => "sudo ezjail-admin stop $super->{ jail }"
				unless $copts{'dry-run'};
			info "cleaning directories: " . ( join ',', @clean );
			for my $d ( @clean ) {
				rcmd $proj->{ super } => "sudo find $super->{ rootdir }$d -type f -delete"
					unless $copts{'dry-run'};
			}
		}

		# name pattern does matter for cleanup process!
		my $last = 'jroll.' . strftime '%Y-%m-%d.%H:%M:%S',localtime;
		info "creating super snapshot: $last"; 
		rcmd $proj->{ super } => "sudo zfs snapshot $super->{ rootfs }\@$last"
			unless $copts{'dry-run'};

		if ( @clean ) {
			debug "starting $super->{ jail }";
			rcmd $proj->{ super } => "sudo ezjail-admin start $super->{ jail }"
				unless $copts{'dry-run'};
		}

		my $dump = "/tmp/$FindBin::Script." . getpwuid($<) . ".$$.$pname";
		info "dumping super delta into $dump"; 
		my $cmd = "sudo zfs send -I \@$base $super->{ rootfs }\@$last " .
			( $proj->{ compress } ? "| $proj->{ compress }" : '' ) . " > $dump";
		debug "executing '$cmd' at $proj->{ super }";
		rcmd $proj->{ super } => $cmd unless $copts{'dry-run'};

		unless ( $copts{'dry-run'} ) {
			my ( $size ) = rcmd $proj->{ super } => "stat -f%z $dump";
			info "dumped $size bytes";
		}

		for ( @$mmbs ) {
			info "applying delta onto $_->{ id }";

			my ( $jail,$host ) = split '@',$_->{ id };
			my ( undef,$pillar ) = split '@',$trts{ $_->{ id } }{ pillar };

			debug "transferring dump from $pillar to $host";
			rcmd $pillar => "scp -o StrictHostKeyChecking=no $dump $host:$dump"
				unless $copts{'dry-run'};

			if ( $trts{ $_->{ id } }{ running } ) {
				debug "stopping $jail\@$host";
				rcmd $host => "sudo ezjail-admin stop $jail"
					unless $copts{'dry-run'};
			} else {
				debug "already stopped $jail\@$host";
			}

			debug "rollback $jail\@$host to \@$base";
			rcmd $host => "sudo zfs rollback -r $trts{ $_->{ id } }{ rootfs }\@$base"
				unless $copts{'dry-run'};

			debug "restoring $jail\@$host to \@$last";
			my $cmd = $proj->{ decompress } ?
				"$proj->{ decompress } < $dump | sudo zfs recv $trts{ $_->{ id } }{ rootfs }" :
				"sudo zfs recv $trts{ $_->{ id } }{ rootfs } < $dump";
			debug "executing '$cmd' at $host";
			rcmd $host => $cmd unless $copts{'dry-run'};

			my @fls = @{ $_->{ copy } // $proj->{ copy } // [qw( /etc/hosts /etc/resolv.conf )] };
			debug "copiyng node files: " .( join ',', @fls ) if @fls;
			for my $f ( @fls ) {
				rcmd $host => "sudo cp $f $trts{ $_->{ id } }{ rootdir }$f"
					unless $copts{'dry-run'};
			}

			my $meta = $_->{ meta } // $proj->{ meta } // '/etc/deploy.meta.yml';
			debug "deploying meta file $meta" if $meta;

			if ( $meta && ! $copts{'dry-run'} ) {
				my ( $metafh,$metafn ) = tempfile or
					fatal "can't create temporary meta file";
				debug "preparing meta file $metafn" if $meta;
				printf $metafh <<EOM,
---
date:     %s
group:    %s
info:     %s
jail:     %s
node:     %s
project:  %s
EOM
				&now, $inact, $proj->{ info } // '~', $jail, $host, $pname;

				close $metafh;
				my $metatmp = '/tmp/deploy.meta.yml.' . getpwuid($<) . ".$$";
				debug "uploading meta file as $metatmp";
				rput $host => $metafn => "$trts{ $_->{ id } }{ rootdir }$metatmp";

				debug "moving meta file to $meta";
				rcmd $host => "sudo mv $trts{ $_->{ id } }{ rootdir }$metatmp $trts{ $_->{ id } }{ rootdir }$meta";
				rcmd $host => "sudo chown 0:0 $trts{ $_->{ id } }{ rootdir }$meta";
				rcmd $host => "sudo chmod 444 $trts{ $_->{ id } }{ rootdir }$meta";
				unlink $metafn;
			}

			unless ( $_->{ halt } ) {
				debug "starting $jail\@$host";
				rcmd $host => "sudo ezjail-admin start $jail"
					unless $copts{'dry-run'};
			} else {
				debug "skip halted $jail\@$host";
			}

			my $dcp = $dcs{ $_->{ dc } // '' }{ pillar };
			unless ( $dcp eq $_->{ id } ) {
				rcmd $host => "rm -f $dump"
					unless $copts{'dry-run'};
				debug "dump removed at $host";
			} else {
				debug "dump keeped as pillar at $host";
			}

			my @sss = reverse @{ $trts{ $_->{ id } }{ sweep } };
			my @tss = reverse @{ $trts{ $_->{ id } }{ snapshots } };
			info "sweeping out " . scalar( @sss ) . " from " . scalar( @tss ) . " snapshots at $_->{ id }"
				if @sss;
			for my $i ( 0 .. $#sss ) {
				debug "destroying $sss[ $i ] at $_->{ id } [" . ( $i + 1 ) . "/" . ( $#sss + 1 ) . "]";
				rcmd $host => "sudo zfs destroy $trts{ $_->{ id } }{ rootfs }\@$sss[ $i ]"
					unless $copts{'dry-run'};
			}
		}

		for ( sort keys %dcs ) {
			my ( undef,$pillar ) = split '@',$dcs{ $_ }{ pillar };
			rcmd $pillar => "rm -f $dump"
				unless $copts{'dry-run'};
			debug "pillar dump removed at $pillar";
		}
	}

	info "all tasks completed successfully, elapsed ". ( time - $start ) . " seconds";
}

sub restart() {
	my $start = time;

	my %copts;
	GetOptions(\%copts, qw(
		active|a
		dry-run|n
		group|g=s
	)) or goto &Help::main;

	# required arguments (projects)
	goto &Help::restart unless @ARGV;

	for my $pname ( @ARGV ) {
		info "dry-run process (read only)"
			if $copts{'dry-run'};

		# get project info
		my $proj = $conf->{ projects }{ $pname } or
			fatal "no project found: $pname";

		my $group = $copts{ group } // inactive $proj;

		if ( $copts{ active } ) {
			my $ng = keys %{ $proj->{ groups } };
			fatal "can't detect active group automatically from $ng groups"
				unless $ng == 2;
			for ( keys %{ $proj->{ groups } } ) {
				next if $_ eq $group;
				$group = $_; last;
			}
			info "detected active group '$group'";
		}

		my $mmbs = $proj->{ groups }{ $group } or
			fatal "no group '$group' defined for project";

		info "work on project '$pname', group '$group'";

		# destinations info
		my %trts;
		for ( @$mmbs ) {
			info "discovering targets info ($_->{ id })";
			$trts{ $_->{ id } } = jinfo split '@',$_->{ id };
		}

		for ( @$mmbs ) {
			info "restarting $_->{ id }";

			my ( $jail,$host ) = split '@',$_->{ id };

			if ( $trts{ $_->{ id } }{ running } ) {
				debug "stopping $jail\@$host";
				unless ( $copts{'dry-run'} ) {
					rcmd $host => "sudo ezjail-admin stop $jail";
					debug "sleeping for 3 seconds...";
					sleep 3;
				}
			} else {
				debug "already stopped $jail\@$host";
			}

			my @fls = @{ $_->{ copy } // $proj->{ copy } // [qw( /etc/hosts /etc/resolv.conf )] };
			debug "copiyng node files: " .( join ',', @fls ) if @fls;
			for my $f ( @fls ) {
				rcmd $host => "sudo cp $f $trts{ $_->{ id } }{ rootdir }$f"
					unless $copts{'dry-run'};
			}

			my $meta = $_->{ meta } // $proj->{ meta } // '/etc/deploy.meta.yml';
			debug "deploying meta file $meta" if $meta;

			if ( $meta && ! $copts{'dry-run'} ) {
				my ( $metafh,$metafn ) = tempfile or
					fatal "can't create temporary meta file";
				debug "preparing meta file $metafn" if $meta;
				printf $metafh <<EOM,
---
date:     %s
group:    %s
info:     %s
jail:     %s
node:     %s
project:  %s
EOM
				&now, $group, $proj->{ info } // '~', $jail, $host, $pname;

				close $metafh;
				my $metatmp = '/tmp/deploy.meta.yml.' . getpwuid($<) . ".$$";
				debug "uploading meta file as $metatmp";
				rput $host => $metafn => "$trts{ $_->{ id } }{ rootdir }$metatmp";

				debug "moving meta file to $meta";
				rcmd $host => "sudo mv $trts{ $_->{ id } }{ rootdir }$metatmp $trts{ $_->{ id } }{ rootdir }$meta";
				rcmd $host => "sudo chown 0:0 $trts{ $_->{ id } }{ rootdir }$meta";
				rcmd $host => "sudo chmod 444 $trts{ $_->{ id } }{ rootdir }$meta";
				unlink $metafn;
			}

			unless ( $_->{ halt } ) {
				debug "starting $jail\@$host";
				rcmd $host => "sudo ezjail-admin start $jail"
					unless $copts{'dry-run'};
			} else {
				debug "skip halted $jail\@$host";
			}
		}
	}
	info "all tasks completed successfully, elapsed ". ( time - $start ) . " seconds";
}

sub show() {
	my $start = time;

	# optional arguments (projects)
	my @projs = @ARGV ? @ARGV : sort keys %{ $conf->{ projects } };

	for my $pname ( @projs ) {
		# get project info
		my $proj = $conf->{ projects }{ $pname } or
			fatal "no project found: $pname";

		my $inact = inactive $proj;
		fatal "no group '$inact' defined for project"
			unless $proj->{ groups }{ $inact };

		info "project '$pname', $proj->{ inactive }";
		for my $grp ( sort keys %{ $proj->{ groups } } ) {
			info "group '$grp', " . ( $grp eq $inact ? 'inactive' : 'active' );
			for ( sort { $a->{id} cmp $b->{id} }  @{ $proj->{ groups }{ $grp } } ) {
				my $inf = jinfo split '@',$_->{ id };
				info "instance '$_->{ id }', " . ( $inf->{ running } ? 'running' : 'stopped' );
			}
		}
	}

	debug "all tasks completed successfully, elapsed ". ( time - $start ) . " seconds";
}

sub jinfo(@) {
	my ( $jail,$host,%kws ) = @_;

	# prepare info structure
	my $inf = {
		host => $host,
		jail => $jail,
	};

	# sanitize (like ezjail does)
	(my $name = $jail) =~ s/[^[:alnum:]]/_/g;

	# get ezjail options
	for ( rcmd $host => "cat /usr/local/etc/ezjail/$name" ) {
		my ( $k,$v ) = /^\s*export\s+jail_${ name }_(\w+)="([^"]+)"\s*$/ or
			next;

		# ip address can be written as 'lo0:10.0.0.1/32'
		$v =~ s/^[^|]+\|// if $k eq 'ip';

		$inf->{ $k } = $v;
	}
	debug "loaded jail settings for $jail\@$host";

	# root directory required
	fatal "can't found root directory for $jail\@$host"
		unless $inf->{ rootdir };

	# get mounted ZFS partitions
	for ( rcmd $host => 'mount -ptzfs' ) {
		my ( $fs,$mp ) = split ' ';
		next unless $mp eq $inf->{ rootdir };
		$inf->{ rootfs } = $fs; last;
	}
	debug "analyzed mount points at $host";

	# rootfs required
	fatal "can't found file system for $jail\@$host"
		unless $inf->{ rootfs };

	# get snapshots for rootfs
	for ( reverse rcmd $host => "zfs list -Hrt snapshot -oname $inf->{ rootfs }" ) {
		push @{ $inf->{ snapshots } }, ( split '@',$_ )[1];
	}

	# prepare snapshots mapping
	$inf->{ mss } = { map { $_ => $_ } @{ $inf->{ snapshots } } };
	debug "got snapshots for $jail\@$host";

	# detect running states
	for ( rcmd $host => "ezjail-admin list" ) {
		my @flds = split ' ';
		next unless $flds[2] eq $inf->{ ip } && $flds[ 3 ] eq $inf->{ hostname };
		$inf->{ running } = $flds[0]=~/R/;
	}

	$inf;
}

sub inactive($) {
	my ( $proj ) = @_;

	if ( my $x = $proj->{ info } ) {
		info "detecting inactive group via http (using 'info')";
		my $ua = LWP::UserAgent->new( timeout => 10 );
		my $rs = $ua->get( $x );
		fatal "can't fetch '$x': " . $rs->status_line
			unless $rs->is_success;
		fatal "unexpected content type of '$x': " . $rs->header('content-type')
			unless $rs->header('content-type') eq 'text/yaml';
		my $info = Load $rs->content or
			fatal "can't parse response ($x)";
		my $inact = $info->{ tail } // fatal "no 'tail' found in response ($x)";

		info "detected inactive group '$inact'";
		return $inact;
	}

	if ( my $x = $proj->{ inactive } ) {
		return $x unless $x =~ m{^http://}; # plain group name

		info "detecting inactive group via http (using 'inactive')";
		my $ua = LWP::UserAgent->new( timeout => 10 );
		my $rs = $ua->get( $x );
		fatal "can't fetch '$x': " . $rs->status_line
			unless $rs->is_success;
		my $inact = $rs->content;

		info "detected inactive group '$inact'";
		return $inact;
	}

	fatal "can't detect inactive group, neither 'info' nor 'inactive' found";
}

sub rcmd($$) {
	my ( $host,$cmd ) = @_;

	# rcmd accepts host@foo as valid argument too
	$host =~ s/^.*\@//;

	chomp( my @out = qx( ssh -o StrictHostKeyChecking=no $host '$cmd' ) );
	fatal qq(can't execute remote: "@out") if $?;
	@out;
}

sub rput($$$) {
	my ( $host,$src,$dst ) = @_;

	chomp( my @out = qx( scp -o StrictHostKeyChecking=no '$src' $host:'$dst' ) );
	fatal qq(can't put to remote: "@out") if $?;
}


# go!
&main;


#
# Dedicated help namespace
#
package Help;

# generic help
sub main {
	die <<EOM . join( "\n", map { ' 'x4 . $_ } sort keys %cmds ) . "\n\n";

Usage: $FindBin::Script [options] <command> [command options] [command arguments]

Help:  $FindBin::Script help <command>

Options:
    -c, --config=FILE  config file to load
    -v, --verbose      more verbose output

Commands:
EOM
}

# help on help :)
sub help {
	die <<EOM . join( "\n", map { ' 'x4 . $_ } sort keys %cmds ) . "\n\n";

Help: brief overview about command options and arguments

Usage: help <command>

Available commands:
EOM
}

# deploy help
sub deploy {
	die <<EOM;

Deploy: apply super changes to group of instances

Usage: deploy [options] project

Options:
    -g, --group=NAME   explicitly set group to deploy
    -n, --dry-run      show what would have been done
    -s, --sweep        force sweeping out

EOM
}

# restart help
sub restart {
	die <<EOM;

Restart: stop & start group of instances

Usage: restart [options] project

Options:
    -a, --active       restart active ('head') group
    -g, --group=NAME   explicitly set group to restart
    -n, --dry-run      show what would have been done

EOM
}

# show help
sub show {
	die <<EOM;

Show detalied information about groups and instances of projects

Usage: show [project]

EOM
}
